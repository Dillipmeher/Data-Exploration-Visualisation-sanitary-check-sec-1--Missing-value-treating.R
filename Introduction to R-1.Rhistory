##----------------------Introduction to R--------------------------------#
#
# Some important shortcuts
# Use # for writing a comment
# Shift + Ctrl + C to comment and de-comment
# Hit Ctrl+Enter to run a line/ selected code
# Zoom In -  Ctrl + +
# Zoom Out - Ctrl + -

# Google for R 
# www.rseek.org

# Let's start coding

1+1

# Print function

print("Hello  IPBA B17")


#getting help in R - use ? or help function
?print


# Or 
help(print)

# print cannot concatenate
print("Hello  IPBA B17.", "Welcome to Intro to R session")
print(1+1)
print("1+1")

print(x = 1)
# paste can concatenate
paste("Hello  IPBA B17.", "Welcome to Intro to R session", sep =   "")

# Arithmatic Operators in R
# + x
# - x
# x + y
# x - y
# x * y
# x / y
# x ^ y
# x %% y    X mod Y - remainder part after divison (also know as modulo)
# x %/% y   Integer part of the division

2+2
3/10
3%%10 # 0*10 + 3
3%/%10

30%/%3

10%%3
10%/%3

3%%10

# Logical operators in R
# ! - NOT
# & - AND
# | - OR

# Conditional operators in R
# Output of condtional logics will always be boolean (TRUE/ FALSE)
# TRUE == 1, FALSE = 0
# ==  (check equality)
# >=  (gte)
# >   (gt)
# <=  (lte)
# <   (lt)
# !=  (not equal to)

2 == 2
3 > 5

2 == 2 & 3 > 5  # WITH AND condition both sides have to be 
                # true for the result to be true

2 == 2 | 3 > 5  # WITH OR condition either of sides have to be 
# true for the result to be true

# data -- class = "10" | score >= 80



# Other important operators
# :         - for sequence
# $         - indexing (the 'element name' operator)
# = or <-   - assignment
# ~         - model formulae



# Simple mathematical operations

# Op 1 - print 3

# or
print (3)

#Op 2 - x/y,x+y... etc.



# Excercise - Find out integer and remainder part when 10 is divided by 0.6?

# Remainder - %%



# Integer division - %/%



#Functions in R
#Base R and functions that are linked to a package that is installed

# Syntax: function_name(arg1=,arg2=,..)

# Base Mathematical funnctions in R

# Find out sum of 3 and 2

33/10
33%/%10

# Excercise - get sum of 
# a.) 1 to 5 
1+2+3+4+5
sum(1,2,3,4,5)

1:100

# Excercise - get sum of 
# b.) 1 to 1000
sum(1:1000)

#paste("1", "100", "Jitendra", sep = ">>>")

seq()

# Other mathematical functions in R - 
# sqrt (x), exp(x), log(x), log(x,n) - log of x to base n
# log10(x) - log base 10, factorial(x), abs(x)
# floor(x) - greatest int < x
# ceiling(x) - smallest int > x
# Statistical functions in R - 
# Mean, min, max, N, sd, quantile, percentile


log(1000)
log(1000, base = 10)

seq(from = 100, to = 1, by = -2)

# Excercise- Find mean of these numbers 1,2,3,4,3,2,1

(1+2+3+4+3+2+1)/7

mean(1,2,3,4,3,2,1)

# Please understand how the mean fn is working


# what do you observe
# check the syntax of mean function



# Now check the syntax of sum function


# Assignment operator
# <- or = is used as assignment operator in R
# Assign a value of 5 to an object p. Print the value of p
# Items in R are stored as objects

seq(from = 2, to = 100, by = 2 )

?"%%"
# We can do Simple arithmetic operations

q<-p+5
q

# Say a store sells shirts and tees.
# Create 2 objects to capture unit sales for day 1 -
# 60 for shirts and 40 for tees

Sales_Shirts <- 60
Sales_Tees<-40

# Excercise - Find total sales and save it in Sales_total object




# Day 2 sales are 70 and 20 resp. for Shirts and Tees
# Replace the day 1 values with day 2 in the objects


# Overwrting values of objects
Sales_Shirts <-70
Sales_Tees <- 20

# Print value of Sales_Total object. What do you observe?





#Overwriting can change data types as well of the object
x<-5
x
x<-"Jigsaw"
x


# Checking the class/ type of the object x - use class function


#deleting/ removing an object from working environment - use rm function
# Remove x and the try to print x






rm(Sales_Shirts, Sales_Tees, Sales_Total)


# Programatically figuring out objects
# ls will give the list of all objects
# that exists in existing environment




# Data structures in R
# Vectors, working with vectors
# Vector : Most Simplest structure in R . Can have only one data type

# How to create a vector?
# It consists of either numbers,strings, or logical values
# but not all of them together.
# It contains only 1 type of class
# Type of vector : Class of the variables
# (Integer,character,logical)


# create a numeric vector xNum having 1 element of value 5



# Now create a char vector xChar of 4 elements 1,2,-5 and 6





# Vectors shouldn't have mixed type of data
# Let's try to create one with mixed data types

p<-c(1,2, TRUE)

# check the class of above vector


# try some other variations of vectors with mixed data types


# Note from above excercise - hierarchy of data types - Char > Numeric > Logical



# Integer class example - use of L
x<-c(1,2,3,4)
class(x)
x1<-c(1.2,2.4,3.5,4.5)
class(x1)
x2<-c(1L,2L,3L,4L)
class(x2)





# Missing values in data
# NA
# NA means missing value
# Why do you think we will have any missing value in data?



# Arithmetic operations on vectors
a1<-c(1,1,1)
a2<-c(2,2,1)
a1+a2

# Try introducing an NA in one of the above vectors and check results



#Create 3 vectors with 5 elements in each
# 1. Customer name
# 2. Age and 
# 3. wether or not Customer defaulted in paying loan


# 1. Customer name
Customer_Name<-c('Sam','Nick','Chris','Joe','Amenda')
Customer_Name

# 2. Age
Customer_Age<-c(18,25,34,NA,17)
Customer_Age

# 3. wether or not Customer defaulted in paying loan
Customer_Default<-c(TRUE,FALSE,TRUE,FALSE,NA) 
Customer_Default



# What is the class (data type) of above vectors?
class(Customer_Name)
class(Customer_Age)
class(Customer_Default)

#How many elements are there in the vectors?
length(Customer_Name)
length(Customer_Age)
length(Customer_Default)



# How do I even check if at all missing values exist in my data? 
# And how many of them are there?



# checking missing values/ it displays logical values in output
# Use is.na function




#Excercise - get count of missing values




# Say I have 2 numeric vectors with score of 2 players in 5 ODIs
Player1 <- c(24,51,45,70,19)
Player2 <- c(34,72,11,70,56)

# Excercise - Get the number of matches in which Player1 scored half centuries?




# Excercise - Get number of matches in which Player 2 did well compared to Player 1





# factors
# data structure to store categorical variables.
gender<- c(1,2,1,2,1,2,1,2)
class(gender)

gender <- factor(gender, levels = c(1,2), labels = c("Male","Female"))
genderF <- factor(gender)

class(genderF)
table(genderF)

# you can use as.factor as well if you just want to change the data type


# Traversing a vector
#Searching with referencing within vectors

brand<-c("Nike","Adidas","Sketchers","Puma","NewBalance")
brand

# Get brand at position 1
brand[1]

# [] - indexer brackets
# () - functional
# { } - if else, loops, 


# Get brand at position 4
brand[4]

# Get all brands but the first one
brand[2:length(brand)]
brand[-1]



# Find brands at position 2 and 4?

brand[c(2,4)]
brand[2:4]

# Matrix - A single data table with values of same data type
# in rows and columns

matrix1 <- matrix(c(1,2,3,1,5,7),
                  nrow = 4, 
                  ncol = 3)
matrix1
matrix1[2,2]

# [ row index, col index ]

# Traversing a matrix
matrix1[,2]
matrix1[2,]
matrix1[2,2]

class(matrix1)

#dataframes
# Data frames - nxm
#Each column can be a different Data types. 
#Consider the following vectors : 

product=c("Bag","shoes","belt","belt")

total_price=c(500,1000,150,10000)

color=c("blue","red","red","blue")

quantity=c(5,2,3,4)

#Creare a dataframe
product_details <- data.frame(product,total_price,color,quantity, 
                              stringsAsFactors = TRUE)
?data.frame
#Understand the idea of StringsAsFactors
product_details <- data.frame(product,total_price,color,quantity)

product_details

View(product_details)

class(product_details)

#To get idea about the variables and datatypes in a dataframe - use str command
# What are factor variables v/s Character variables?




#Selecting data out of a data frame/ traversing through the data

# Excercise
# Select data point at 2nd row ,3rd col position
product_details[2,3]

# Select 2nd row
product_details[2,]

# select 3 column
product_details[,3]

# Select total price and quantity
product_details[,c(2,4)]

#$

class(product_details$quantity)

class(product_details[,4])

class(product_details["quantity"])

temp1_v <- product_details$quantity

temp2_df <- product_details["quantity"]

#Lists : Recursive vectors. 
#Can handle different data types or various sizes
my_list <- list( name = c("Robert", "Emma"), age = c (65, 54,43),
                 retired = c (TRUE, FALSE))

#Note the $ sign against each variable to distinguish the output as list variables
my_list

#To get a variable out of the list - 2 ways - 
# use $ or indexer brackets ["<ob name>"]


my_list$name

my_list$name[1]

my_list[1]
my_list$name

class(my_list[1])
class(my_list$name)

# Let us check basic difference in classes. 
# Note one is vector and other is list itsef
class(my_list$age)
class(my_list["age"])

my_list$age[2]

my_list["age"]$age[2]

my_list["age"]$age[2]

my_list[["age"]][2]
my_list["age"]

# So how to traverse in a list
my_list$age[2]

vl <- my_list["age"]

vvec <- my_list[["age"]]
vvec1 <- my_list["age"]$age
vvec2 <- my_list$age

# or Getting 2nd entity inside variable Age of my_list. This is double referencing
my_list[["age"]][2]
# Double square brackets are a must when we do double referencing


my.list[[3]]
my.list [[3]][2]

##Importing tabular data##

# Checks needed to ensure that data is imported correctly
#1. Delimiter in the file (sep argument)
#2. How missing values are populated in the data (na.strings)



import1<-read.table("F:\\Jitendra\\IPBA\\Training\\R\\sample2.csv",sep=",",header = TRUE)

summary(import1) #Focus on the missing values
str(import1) #Are column data types correct
class(import1)

import2<-read.table("F:\\Jitendra\\IPBA\\Training\\R\\sample1.txt")
#Why error?

import2<-read.table("F:\\Jitendra\\IPBA\\Training\\R\\sample1.txt",sep="\t")

import2#What is wrong?

import2<-read.table("F:\\Jitendra\\IPBA\\Training\\R\\sample1.txt",
                    sep="\t",header=TRUE)
import2
summary(import2)
str(import2)

import2<-read.table("F:\\Jitendra\\IPBA\\Training\\R\\sample1.txt",
                    sep="\t",header=TRUE,
                    na.strings = c(NA,"Missing",""))

import2<-read.csv("F:\\Jitendra\\IPBA\\Training\\R\\sample2.csv",
                  header=TRUE,
                  stringsAsFactors = FALSE)

import2$Location <- as.factor(import2$Location)

summary(import2)

str(import2)

##Data import is considered successfull: 
#1.Delimiters are identified correctly, 
#2.Missing values in the data are recognized as missing (NA)

#Syntax of various read. functions
# read.table(file, header = FALSE, sep = "", quote = "\"'",
#            dec = ".", numerals = c("allow.loss", "warn.loss", "no.loss"),
#            row.names, col.names, as.is = !stringsAsFactors,
#            na.strings = "NA", colClasses = NA, nrows = -1,
#            skip = 0, check.names = TRUE, fill = !blank.lines.skip,
#            strip.white = FALSE, blank.lines.skip = TRUE,
#            comment.char = "#",
#            allowEscapes = FALSE, flush = FALSE,
#            stringsAsFactors = default.stringsAsFactors(),
#            fileEncoding = "", encoding = "unknown", text, skipNul = FALSE)
# read.csv(file, header = TRUE, sep = ",", quote = "\"",
#          dec = ".", fill = TRUE, comment.char = "", .)
# 
# read.csv2(file, header = TRUE, sep = ";", quote = "\"",
#           dec = ",", fill = TRUE, comment.char = "", .)
# 
# read.delim(file, header = TRUE, sep = "\t", quote = "\"",
#            dec = ".", fill = TRUE, comment.char = "", .)
# 
# read.delim2(file, header = TRUE, sep = "\t", quote = "\"",
#             dec = ",", fill = TRUE, comment.char = "", .)
#Getting tables from web pages
#Many web pages contain tabular data as comma separated or tab separated
#UCI Abalone data set
web2<-read.csv("https://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data",header=FALSE)
web2

# Extras-Other functions in R

#SEQUENCE
sequence <- seq(100,200)
sequence

sequence_by <- seq(from = 10, to = 20, by = 0.5)
sequence_by

#REPEAT
repeat1 <- rep (1,5)
repeat1

#repeat a seq n times
rep(1:5,2)

# repeat each number in seq n times
rep(1:5, each = 2)

# Get seq 1,1,1.5,1.5,2,2


rep(seq(1,2,by=0.5), each = 2)

# Saving an object to working directory
save(repeat1, file ="repeat1.rda")
rm(repeat1) #removing from environment
ls() # checking environmet object list

# reloading saved object from directory to environment
load("repeat1.rda")
ls()

#Saving entire set of objects in directory
save.image("all_work.RData")
rm(list = ls())

load ("all_work.RData")
